@page "/Admin-Panel"
@using System.Globalization
@using DVar.Blog.App.Api
@using DVar.BLog.Shared.Requests.Feedbacks
@using DVar.BLog.Shared.Responses

<PageTitle>Обратная связь</PageTitle>

<h3 class="fs-1">Панель администратора</h3>

@if (_feedbacks is null)
{
    <DisplayLoading/>
}
else if (!_feedbacks.Any())
{
    <Message Text="Нет сообщений по обратной связи!!!"/>
}
else
{
    @foreach (var feedback in _feedbacks)
    {
        <div class="card card-flip">
            <div class="card-header">
                @feedback.MessageTitle
            </div>
            <div class="card-body">
                <p class="card-text" style="word-break:break-all;">@feedback.MessageBody</p>
                <p>
                    <strong>Тип обратной связи:</strong> @feedback.GetFeedbackTypeByText()
                </p>
                <p>
                    <strong>Пользователь:</strong> @feedback.UserFullName.Surname @feedback.UserFullName.FirstName @feedback.UserFullName.MiddleName
                </p>
                <p>
                    <strong>Email:</strong> @feedback.UserEmail
                </p>
                <p>
                    <strong>Отправлено:</strong> @feedback.FeedbackCratedDateTime.ToLocalTime().ToString(CultureInfo.CurrentCulture)
                </p>
            </div>
            <EditForm Model="_feedbackProcessing" OnValidSubmit="() => HandleAddingProcessingAsync(feedback.Id)">
                <input class="form-control bg-main txt-green-dim jap-font no-border" type="datetime-local" id="taskDateTime" name="taskDateTime" @bind="_feedbackProcessing.DueDateTime">
                <div class="mt-2 mb-2">
                    <div class="row">
                        <div class="offset-4 col-8 text-right">
                            <button class="btn btn-primary animated-blink-bg txt-dark" type="submit">Задать дату обработки</button>
                        </div>
                    </div>
                </div>
            </EditForm>
            <button class="btn btn-primary" @onclick="() => _showFeedbackResponseForm = !_showFeedbackResponseForm">
                @(!_showFeedbackResponseForm ? "Показать форму для ответа" : "Скрыть форму для ответа")
            </button>
            @if (_showFeedbackResponseForm)
            {
                <EditForm Model="_feedbackResponse" OnValidSubmit="() => HandleSubmitResponse(feedback.Id)" OnInvalidSubmit="HandleInvalidSubmitResponse">
                    <FormSection Title="Ответ на обратную связь" HelpText="">
                        <FormFieldSet LabelFor="feedbackResponse" Label="Сообщение для пользователя">
                            <InputText @bind-Value="_feedbackResponse.Response"
                                       class="form-control bg-main txt-green-dim jap-font no-border"
                                       id="feedbackResponse"/>
                        </FormFieldSet>
                    </FormSection>
                    @if (_showLoading)
                    {
                        <p class="fs-3 fw-bold">ЗАГРУЗКА...</p>
                    }

                    @if (_submitSuccessful)
                    {
                        <SuccessAlertAlt Message="Обратная связь успешно отправлена!"/>
                    }
                    else if (_errorMessage is not null)
                    {
                        <ErrorAlertAlt Message="@_errorMessage"/>
                    }
                    <FormSubmitButtonContainer OnReset="@(() => _feedbackResponse = new CreateFeedbackResponseRequest())"/>
                </EditForm>
            }
        </div>
    }
}

@code {
    [Inject] public FeedbackApi FeedbackApi { get; set; } = null!;
    [Inject] public FeedbackResponseApi FeedbackResponseApi { get; set; } = null!;
    [Inject] public FeedbackProcessingApi FeedbackProcessingApi { get; set; } = null!;
    private List<FeedbackResponse_>? _feedbacks;
    private bool _showFeedbackResponseForm;
    private CreateFeedbackResponseRequest _feedbackResponse = new();
    private CreateFeedbackProcessingRequest _feedbackProcessing = new();
    private bool _submitSuccessful;
    private string? _errorMessage;
    private bool _showLoading;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _feedbacks = await FeedbackApi.ListFeedbacksAsync();
        }
        catch (HttpRequestException e)
        {
            _errorMessage = e.Message;
        }
    }

    private async Task HandleSubmitResponse(Guid feedbackId)
    {
        try
        {
            _showLoading = true;
            _feedbackResponse.FeedbackId = feedbackId;
            await FeedbackResponseApi.CreateFeedbackResponseAsync(_feedbackResponse);
            _submitSuccessful = true;
            _showLoading = false;
        }
        catch (HttpRequestException e)
        {
            _errorMessage = e.Message;
        }
    }

    private void HandleInvalidSubmitResponse()
    {
        _showLoading = false;
        _submitSuccessful = false;
    }

    private async Task HandleAddingProcessingAsync(Guid feedbackId)
    {
        try
        {
            _feedbackProcessing.FeedbackId = feedbackId;
            await FeedbackProcessingApi.CreateFeedbackProcessingAsync(_feedbackProcessing);
        }
        catch (HttpRequestException e)
        {
            _errorMessage = e.Message;
        }
    }

}